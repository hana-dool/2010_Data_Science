# Example for Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa.R
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
#-------------------------------------------------------------------------------
# Read The data file:
myData = read.csv("TherapeuticTouchData.csv")
yName = "y" # column name for 0,1 values
sName = "s" # column name for subject ID
# Optional: Specify filename root and graphical format for saving output.
# Otherwise specify as NULL or leave saveName and saveType arguments
# out of function calls.
fileNameRoot = "Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa-"
graphFileType = "eps"
# myData = read.csv("StormTressoldiDiRisio2010data.csv")
# yName = "Correct" # column name for 0,1 values
# sName = "Study" # column name for "subject" ID
# # Optional: Specify filename root and graphical format for saving output.
# # Otherwise specify as NULL or leave saveName and saveType arguments
# # out of function calls.
# fileNameRoot = "StormTressoldiDiRisio2010-"
# graphFileType = "eps"
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , sName=sName , yName=yName ,
numSavedSteps=20000 , saveName=fileNameRoot , thinSteps=10 )
# myData = read.csv("StormTressoldiDiRisio2010data.csv")
# yName = "Correct" # column name for 0,1 values
# sName = "Study" # column name for "subject" ID
# # Optional: Specify filename root and graphical format for saving output.
# # Otherwise specify as NULL or leave saveName and saveType arguments
# # out of function calls.
# fileNameRoot = "StormTressoldiDiRisio2010-"
# graphFileType = "eps"
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa.R")
# Example for Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa.R
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
#-------------------------------------------------------------------------------
# Read The data file:
myData = read.csv("TherapeuticTouchData.csv")
yName = "y" # column name for 0,1 values
sName = "s" # column name for subject ID
# Optional: Specify filename root and graphical format for saving output.
# Otherwise specify as NULL or leave saveName and saveType arguments
# out of function calls.
fileNameRoot = "Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa-"
graphFileType = "eps"
# myData = read.csv("StormTressoldiDiRisio2010data.csv")
# yName = "Correct" # column name for 0,1 values
# sName = "Study" # column name for "subject" ID
# # Optional: Specify filename root and graphical format for saving output.
# # Otherwise specify as NULL or leave saveName and saveType arguments
# # out of function calls.
# fileNameRoot = "StormTressoldiDiRisio2010-"
# graphFileType = "eps"
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa.R")
#-------------------------------------------------------------------------------
myData
#-------------------------------------------------------------------------------
myData['s']
#-------------------------------------------------------------------------------
as.factor(myData['s'])
#-------------------------------------------------------------------------------
as.factor(myData['s'])
#-------------------------------------------------------------------------------
as.numeric(as.factor(myData['s']))
#-------------------------------------------------------------------------------
myData['s']
#-------------------------------------------------------------------------------
as.numeric(myData['s'])
#-------------------------------------------------------------------------------
as.numeric(myData['s'])
#-------------------------------------------------------------------------------
myData
#-------------------------------------------------------------------------------
myData$s
#-------------------------------------------------------------------------------
as.numeric(myData$s)
#-------------------------------------------------------------------------------
as.factor(myData$s)
#-------------------------------------------------------------------------------
as.numeric(as.factor(myData$s))
#-------------------------------------------------------------------------------
myData$s= as.numeric(as.factor(myData$s))
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , sName=sName , yName=yName ,
numSavedSteps=20000 , saveName=fileNameRoot , thinSteps=10 )
myData
# Example for Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa.R
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
#-------------------------------------------------------------------------------
# Read The data file:
myData = read.csv("TherapeuticTouchData.csv")
yName = "y" # column name for 0,1 values
sName = "s" # column name for subject ID
# Optional: Specify filename root and graphical format for saving output.
# Otherwise specify as NULL or leave saveName and saveType arguments
# out of function calls.
fileNameRoot = "Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa-"
graphFileType = "eps"
# myData = read.csv("StormTressoldiDiRisio2010data.csv")
# yName = "Correct" # column name for 0,1 values
# sName = "Study" # column name for "subject" ID
# # Optional: Specify filename root and graphical format for saving output.
# # Otherwise specify as NULL or leave saveName and saveType arguments
# # out of function calls.
# fileNameRoot = "StormTressoldiDiRisio2010-"
# graphFileType = "eps"
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa.R")
#-------------------------------------------------------------------------------
myData$s= as.numeric(as.factor(myData$s))
myData
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , sName=sName , yName=yName ,
numSavedSteps=20000 , saveName=fileNameRoot , thinSteps=10 )
# Example for Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa.R
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
#-------------------------------------------------------------------------------
# Read The data file:
myData = read.csv("TherapeuticTouchData.csv")
yName = "y" # column name for 0,1 values
sName = "s" # column name for subject ID
# Optional: Specify filename root and graphical format for saving output.
# Otherwise specify as NULL or leave saveName and saveType arguments
# out of function calls.
fileNameRoot = "Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa-"
graphFileType = "eps"
# myData = read.csv("StormTressoldiDiRisio2010data.csv")
# yName = "Correct" # column name for 0,1 values
# sName = "Study" # column name for "subject" ID
# # Optional: Specify filename root and graphical format for saving output.
# # Otherwise specify as NULL or leave saveName and saveType arguments
# # out of function calls.
# fileNameRoot = "StormTressoldiDiRisio2010-"
# graphFileType = "eps"
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , sName=sName , yName=yName ,
numSavedSteps=20000 , saveName=fileNameRoot , thinSteps=10 )
#-------------------------------------------------------------------------------
myData$s
#-------------------------------------------------------------------------------
as.factor(myData$s)
#-------------------------------------------------------------------------------
as.numeric(as.factor(myData$s))
#-------------------------------------------------------------------------------
myData$s= as.numeric(as.factor(myData$s))
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , sName=sName , yName=yName ,
numSavedSteps=20000 , saveName=fileNameRoot , thinSteps=10 )
# myData = read.csv("StormTressoldiDiRisio2010data.csv")
# yName = "Correct" # column name for 0,1 values
# sName = "Study" # column name for "subject" ID
# # Optional: Specify filename root and graphical format for saving output.
# # Otherwise specify as NULL or leave saveName and saveType arguments
# # out of function calls.
# fileNameRoot = "StormTressoldiDiRisio2010-"
# graphFileType = "eps"
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ydich-XnomSsubj-MbernBetaOmegaKappa-prior.R")
#-------------------------------------------------------------------------------
myData$s= as.numeric(as.factor(myData$s))
# Generate the MCMC chain:
mcmcCoda = genMCMC( data=myData , sName=sName , yName=yName ,
numSavedSteps=20000 , saveName=fileNameRoot , thinSteps=10 )
#-------------------------------------------------------------------------------
# Display diagnostics of chain, for specified parameters:
parameterNames = varnames(mcmcCoda) # get all parameter names for reference
for ( parName in parameterNames[c(1:3,length(parameterNames))] ) {
diagMCMC( codaObject=mcmcCoda , parName=parName ,
saveName=fileNameRoot , saveType=graphFileType )
}
#-------------------------------------------------------------------------------
# Get summary statistics of chain:
summaryInfo = smryMCMC( mcmcCoda , compVal=0.5 ,
diffIdVec=c(1,14,28),  # Therapeutic touch
# diffIdVec=c(38,60,2),  # ESP Tressoldi et al.
compValDiff=0.0 ,
saveName=fileNameRoot )
# Display posterior information:
plotMCMC( mcmcCoda , data=myData , sName=sName , yName=yName ,
compVal=0.5 , #rope=c(0.45,0.55) , # Therapeutic touch
diffIdVec=c(1,14,28),              # Therapeutic touch
# compVal=0.25 , #rope=c(0.22,0.28) , # ESP Tressoldi et al.
# diffIdVec=c(38,60,2),               # ESP Tressoldi et al.
compValDiff=0.0, #ropeDiff = c(-0.05,0.05) ,
saveName=fileNameRoot , saveType=graphFileType )
rgamma(10,0.01,0.01)
hist(rgamma(1000,0.01,0.01))
hist(rgamma(1000,0.01,0.01))
rgamma(1000,0.01,0.01)
rgamma(1000,0.01,0.01)
rgamma(1000,0.01,100)
rgamma(1000,0.01,100)
rgamma(1000,0.01,100)
rgamma(1000,0.01,0.01)
rgamma(1,0.01,0.01)
rgamma(1,shape=0.01,rate=0.01)
rgamma(1,shape=0.01,rate=0.01)
rgamma(1,shape=0.01,rate=0.01)
rgamma(1,shape=0.01,rate=0.01)
rgamma(1,shape=0.01,rate=0.01)
dgamma(1,shape=0.01,rate=0.01)
dgamma(1,shape=0.01,rate=0.01)
dgamma(1,shape=0.01,rate=0.01)
dgamma(1,shape=0.01,rate=0.01)
dgamma(1,shape=0.01,rate=0.01)
rgamma(10,shape=0.01,rate=0.01)
hist(rgamma(10,shape=0.01,rate=0.01))
x= c(1)
y= c(1)
plot(x,y)
plot(x,y)
hist(rgamma(10,shape=0.01,rate=0.01))
hist(rgamma(1000,shape=0.01,rate=0.01))
hist(rgamma(1000,shape=0.01,rate=0.01))
hist(rgamma(1000,shape=1.1,rate-1.05))
hist(rgamma(1000,shape=1.1,rate=1.05))
hist(rgamma(1000,shape=0.01,rate=0.01),breaks = 100)
hist(rgamma(1000,shape=0.01,rate=0.01),breaks = 100)
hist(rgamma(10000,shape=0.01,rate=0.01),breaks = 100)
hist(rgamma(10000,shape=1.1,rate=1.05))
hist(rgamma(10000,shape=1.1,rate=1.05),breaks = 100)
mode(hist(rgamma(10000,shape=0.01,rate=0.01),breaks = 100))
mod(hist(rgamma(10000,shape=0.01,rate=0.01),breaks = 100))
median(hist(rgamma(10000,shape=0.01,rate=0.01),breaks = 100))
median(rgamma(1000,0.01,0.01))
median(rgamma(1000,0.01,0.01))
mode(rgamma(1000,0.01,0.01))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(rgamma(1000,0.01,0.01))
getmode(rgamma(10000,0.01,0.01))
getmode(rgamma(10000,0.01,0.01))
getmode(rgamma(10000,0.01,0.01))
mean(rgamma(1000,0.01,0.01))
mean(rgamma(1000,0.01,0.01))
mean(rgamma(1000,0.01,0.01))
mean(rgamma(1000,0.01,0.01))
(hist(rgamma(10000,shape=0.01,rate=0.01),breaks = 100))
setwd('C:/Users/goran/Desktop/개인 자료')
data = read.csv('R.csv')
#data['rain']=exp(data['rain'])-1
#data['youtube'] = exp(data['youtube'])-1
data[,c(5,7,8,9,10,11)] = scale(data[,c(5,7,8,9,10,11)])
data[,'temp'] = abs(data[,'temp'])
data = data[-577,]
row.names(data) <- NULL
data
# 요일,월별 변화를 알아보기위해 subway, naver 변수를 삭제
# 이 상태에서 알아본 요일별 추이는 다음과 같음
model<-lm(order~.,data=subset(data,select = -c(rain_ox,rain1,rain2,rain3,corona,bok)))
summary(model)
barplot(model$coefficients,cex.names = 0.7)
# 최종모델 (독립성이 크게 위배되어 일별 기울기는 믿을만하지 못하다.)
model<-lm(order~.,data=subset(data,select = -c(rain_ox,rain1,rain2,rain3,corona,bok)))
summary(model)
barplot(model$coefficients,cex.names = 0.7)
library(gvlma)
gvlma(model)
#------------------------ 성능시험 -------------------------------#
set.seed(12345)
#getting training data set sizes of .20 (in this case 20 out of 100)
train_size <- floor(0.80*nrow(data))
in_rows <- sample(c(1:nrow(data)), size = train_size, replace = FALSE)
train <- data[in_rows, ]
test <- data[-in_rows, ]
model_test<-lm(order~.,data=subset(train,select = -c(rain_ox,rain1,rain2,rain3,corona)))
pred_y<-predict(model_test,test)
mean((test$order - pred_y)^2)
library(corrplot)
corrplot(cor(data),method = 'number')
#------------Linearlity 조사 ----------#
# 빨간 선(residual 들의 추세) 가 0에서 직선 형태.
# 모델이 linear 하다고 볼 수 있겠다.
# 즉 에러는 크지만 X,y 간에 linear 관계가 있다고 볼 수 있다.
# 위의 OULIER 들은 model 이 예측 못하는 지점
plot(model,1)
#------------Normality 조사 -----------#
plot(model, 2) # 양 끝 지점에서 들리는 모습?
# distribution of studentized residuals
h = hist(model$residuals,breaks = 50)
g = model$residuals
# 어느정도 Normal 이라고 볼 수는 있을거 같다.
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
lines(xfit, yfit, col = "black", lwd = 2)
#------------오차의 독립성--------------#
# 시계열. 코로나 이전,이후가 상당히 연관있어보인다.
plot(model$residuals)
# 1 차이로 본 잔차이다. 서로 연관은없는듯
plot(model$residuals[c(1:990)],model$residuals[c(2:991)])
acf(model$residuals) # 자기상관여부는 괜찮은듯
crPlots(model)
#----------- 등분산 가정 ---------------#
plot(model, 1)
#----------- High leverage points , Outlier ----------#
# High leverage points
# 아마 우리가 집어넣지 못한 변수들에 대해서 이런게 나타나는거 같은
plot(model, 4)
data[1639,]
data[1422,]
#------------ 다중공선성----------------#
# 크게 이슈는 없어보인다.
library('car')
vif(model)
c = vif(model)
barplot(c,horiz = T,xlim=c(0,6))
abline(v=5,col='red')
